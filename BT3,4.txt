// SPDX-License-Identifier: unlicensed

pragma solidity ^0.8.0;

contract Bank{

    mapping(address =>uint256) balances;

    function depositMoney(uint256 amount) public {
        require(amount >0, "Amount must be greater than 0" );
        balances[msg.sender] = balances[msg.sender] + amount;
    }

    function withdrawMoney(uint256 amount) public {
        require(amount <= balances[msg.sender], "Insufficiant balance" );
        balances[msg.sender] = balances[msg.sender] - amount;
    }

    function showBalance() public view returns(uint256){
        return balances[msg.sender];
    }

}



-------------------------------------------------------------------------------------

// SPDX-License-Identifier: unlicensed

pragma solidity ^0.8.0;

contract StudentDB{

    struct student{
        string name;
        uint256 rollno;
        string class;
    }

    student[] private students;

    function addStudent( string memory name, uint256 rollno, string memory class) public{
        students.push(student(name,rollno,class));
    }

    function getStudentById(uint256 id) public view returns(string memory name, uint256 rollno, string memory class){
        require( id<students.length, " Student does not exist in database");
        return(students[id].name,students[id].rollno,students[id].class);
    }

    function TotalStudents() public view returns(uint256){
        return students.length;
    }

 // Fallback function
    fallback() external payable {
        // Optionally, you can add logic here, like logging the call or simply allowing Ether to be received.
    }

    // Receive function to accept Ether directly
    receive() external payable {
        // This function is executed when Ether is sent directly to the contract
    }



}
